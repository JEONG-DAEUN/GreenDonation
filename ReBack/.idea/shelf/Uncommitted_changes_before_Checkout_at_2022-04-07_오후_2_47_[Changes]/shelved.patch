Index: src/main/java/ReBack/core/Repository/MemberRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ReBack.core.Repository;\r\n\r\nimport ReBack.core.data.Member;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface MemberRepository extends JpaRepository<Member, String> {\r\n    boolean existsByMemberId(String memberId);\r\n    boolean existsByEmail(String email);\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/Repository/MemberRepository.java b/src/main/java/ReBack/core/Repository/MemberRepository.java
--- a/src/main/java/ReBack/core/Repository/MemberRepository.java	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/main/java/ReBack/core/Repository/MemberRepository.java	(date 1649310330503)
@@ -2,12 +2,10 @@
 
 import ReBack.core.data.Member;
 import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.stereotype.Repository;
 
-@Repository
-public interface MemberRepository extends JpaRepository<Member, String> {
+import java.util.Optional;
+
+public interface MemberRepository extends JpaRepository<Member, Long> {
     boolean existsByMemberId(String memberId);
-    boolean existsByEmail(String email);
-
-}
 
+}
\ No newline at end of file
Index: src/main/java/ReBack/core/controller/ApiController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ReBack.core.controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport ReBack.core.Repository.MemberRepository;\r\n\r\nimport java.util.Optional;\r\n\r\nimport ReBack.core.data.Member;\r\n\r\n@RestController\r\n@RequestMapping(\"/api\")\r\npublic class ApiController {\r\n\r\n    @Autowired\r\n    private MemberRepository memberRepository;\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n\r\n    @PostMapping(\"/singUp1\")\r\n    public String insertUser1(@RequestBody Member member) {\r\n        if (member.getMemberId() == \"\" || member.getMemberId() == null){\r\n//                == null && member.getEmail() == \"\" || member.getEmail() == null) {\r\n            member.setMemberId(\"member\");\r\n//            member.setEmail(\"member\");\r\n        }\r\n\r\n        Optional<Member> idCheck = memberRepository.findById(member.getMemberId());\r\n//       Optional<Member> emailCheck = memberRepository.findById(member.getEmail());\r\n\r\n        if (idCheck.isPresent() == true ){\r\n//                && idCheck.isPresent() ==true ) {\r\n            return \"no\";\r\n        } else {\r\n//           String inputEmail = member.getEmail();\r\n//           member.setEmail(inputEmail);\r\n           String encodedPassword = passwordEncoder.encode(member.getMemberPassword());\r\n           member.setMemberPassword(encodedPassword);\r\n            //System.out.println(\"길이: \"+userInfo.getAdminPw().length());\r\n            // 비밀번호 재확인은 구현안함\r\n            // https://youngjinmo.github.io/2021/05/passwordencoder/\r\n           memberRepository.save(member);\r\n            return \"ok\";\r\n        }\r\n//\r\n    }\r\n\r\n    @PostMapping(\"/singUp\")\r\n    public String insertUser(@RequestBody Member member) {\r\n        if (member.getMemberId() == \"\" || member.getMemberId() == null){\r\n//                == null && member.getEmail() == \"\" || member.getEmail() == null) {\r\n            member.setMemberId(\"member\");\r\n//            member.setEmail(\"member\");\r\n        }\r\n\r\n        Optional<Member> idCheck = memberRepository.findById(member.getMemberId());\r\n//       Optional<Member> emailCheck = memberRepository.findById(member.getEmail());\r\n\r\n        if (idCheck.isPresent() == true ){\r\n//                && idCheck.isPresent() ==true ) {\r\n            return \"no\";\r\n        } else {\r\n//           String inputEmail = member.getEmail();\r\n//           member.setEmail(inputEmail);\r\n//            String encodedPassword = passwordEncoder.encode(member.getMemberPassword());\r\n//            member.setMemberPassword(encodedPassword);\r\n            //System.out.println(\"길이: \"+userInfo.getAdminPw().length());\r\n            // 비밀번호 재확인은 구현안함\r\n            // https://youngjinmo.github.io/2021/05/passwordencoder/\r\n//            memberRepository.save(member);\r\n            return \"ok\";\r\n        }\r\n//\r\n    }\r\n\r\n    @PostMapping(\"/Login\")\r\n    public String chkUser(@RequestBody Member userInfo) {\r\n\r\n        Optional<Member> adminchk = memberRepository.findById(userInfo.getMemberId());\r\n        Member adminCheck = adminchk.get();\r\n        //System.out.println(adminCheck.getAdminId());\r\n\r\n        // 디비에 있는 비밀번호\r\n        //System.out.println(adminCheck.getAdminPw());\r\n\r\n        if(adminCheck.getMemberId().equals(userInfo.getMemberId()) &&\r\n                passwordEncoder.matches(userInfo.getMemberPassword(), adminCheck.getMemberPassword())) {\r\n            // 입력한 비밀번호, 디비 비밀번호 비교\r\n            return \"ok\";\r\n        } else {\r\n            System.out.println(\"비밀번호가 일치하지 않습니다.\");\r\n            return \"no\";\r\n        }}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/controller/ApiController.java b/src/main/java/ReBack/core/controller/ApiController.java
--- a/src/main/java/ReBack/core/controller/ApiController.java	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/main/java/ReBack/core/controller/ApiController.java	(date 1649310467850)
@@ -1,11 +1,10 @@
 package ReBack.core.controller;
 
+import ReBack.core.Repository.MemberRepository;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.web.bind.annotation.*;
 
-import ReBack.core.Repository.MemberRepository;
-
 import java.util.Optional;
 
 import ReBack.core.data.Member;
@@ -21,74 +20,53 @@
     private PasswordEncoder passwordEncoder;
 
 
-    @PostMapping("/singUp1")
+
+    @PostMapping("/singUp")
     public String insertUser1(@RequestBody Member member) {
-        if (member.getMemberId() == "" || member.getMemberId() == null){
-//                == null && member.getEmail() == "" || member.getEmail() == null) {
+        System.out.println(member.getMemberId());
+
+        if (member.getMemberId() == "" || member.getMemberId() == null) {
             member.setMemberId("member");
-//            member.setEmail("member");
-        }
-
-        Optional<Member> idCheck = memberRepository.findById(member.getMemberId());
-//       Optional<Member> emailCheck = memberRepository.findById(member.getEmail());
+            System.out.println();
+            return "ng";
+        } else {
+            Optional<Member> idCheck = memberRepository.findById(member.getMemberId());
+            Member adminCheck = idCheck.get();
 
-        if (idCheck.isPresent() == true ){
-//                && idCheck.isPresent() ==true ) {
-            return "no";
-        } else {
-//           String inputEmail = member.getEmail();
-//           member.setEmail(inputEmail);
+            if (member.getMemberId() == adminCheck.getMemberId()) {
+                return "no";
+            } else {
+                return "ok";
+            }
+
+        }
+
+    }
+
+
+
+    @PostMapping("/singUp1")
+    public String insertUser(@RequestBody Member member) {
+
            String encodedPassword = passwordEncoder.encode(member.getMemberPassword());
            member.setMemberPassword(encodedPassword);
-            //System.out.println("길이: "+userInfo.getAdminPw().length());
-            // 비밀번호 재확인은 구현안함
-            // https://youngjinmo.github.io/2021/05/passwordencoder/
-           memberRepository.save(member);
+            memberRepository.save(member);
             return "ok";
-        }
-//
+
     }
 
-    @PostMapping("/singUp")
-    public String insertUser(@RequestBody Member member) {
-        if (member.getMemberId() == "" || member.getMemberId() == null){
-//                == null && member.getEmail() == "" || member.getEmail() == null) {
-            member.setMemberId("member");
-//            member.setEmail("member");
-        }
+    @PostMapping("/Login")
+    public String chkUser(@RequestBody Member member) {
 
         Optional<Member> idCheck = memberRepository.findById(member.getMemberId());
-//       Optional<Member> emailCheck = memberRepository.findById(member.getEmail());
-
-        if (idCheck.isPresent() == true ){
-//                && idCheck.isPresent() ==true ) {
-            return "no";
-        } else {
-//           String inputEmail = member.getEmail();
-//           member.setEmail(inputEmail);
-//            String encodedPassword = passwordEncoder.encode(member.getMemberPassword());
-//            member.setMemberPassword(encodedPassword);
-            //System.out.println("길이: "+userInfo.getAdminPw().length());
-            // 비밀번호 재확인은 구현안함
-            // https://youngjinmo.github.io/2021/05/passwordencoder/
-//            memberRepository.save(member);
-            return "ok";
-        }
-//
-    }
-
-    @PostMapping("/Login")
-    public String chkUser(@RequestBody Member userInfo) {
-
-        Optional<Member> adminchk = memberRepository.findById(userInfo.getMemberId());
-        Member adminCheck = adminchk.get();
+        Member adminCheck = idCheck.get();
         //System.out.println(adminCheck.getAdminId());
 
         // 디비에 있는 비밀번호
         //System.out.println(adminCheck.getAdminPw());
 
-        if(adminCheck.getMemberId().equals(userInfo.getMemberId()) &&
-                passwordEncoder.matches(userInfo.getMemberPassword(), adminCheck.getMemberPassword())) {
+        if(adminCheck.getMemberId().equals(member.getMemberId()) &&
+                passwordEncoder.matches(member.getMemberPassword(), adminCheck.getMemberPassword())) {
             // 입력한 비밀번호, 디비 비밀번호 비교
             return "ok";
         } else {
@@ -97,7 +75,23 @@
         }}
 
 
-
+//    @GetMapping("/check/sendSMS")
+//    public @ResponseBody
+//    String sendSMS(String memberPhoneNumber) {
+//
+//        Member rand  = new Member();
+//        String numStr = "";
+//        for(int i=0; i<4; i++) {
+//            String ran = Integer.toString(rand.nextInt(10));
+//            numStr+=ran;
+//        }
+//
+//        System.out.println("수신자 번호 : " + memberPhoneNumber);
+//        System.out.println("인증번호 : " + numStr);
+//
+//        certificationService.certifiedPhoneNumber(memberPhoneNumber,numStr);
+//        return numStr;
+//    }
 
 
 }
Index: src/main/resources/templates/mrmberhoewongaib.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html xmlns:th=\"http://www.thymeleaf.org\">\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Index</title>\r\n    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"\r\n            integrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\"\r\n            crossorigin=\"anonymous\"></script>\r\n</head>\r\n<body>\r\n<fieldset>\r\n    <legend>필수입력사항</legend>\r\n    <div>\r\n        <label for=\"memberId\">아이디:\r\n            <!--            <input id=\"memberId\" name=\"memberId\" type=\"text\" maxlength=\"15\" title=\"입력\">-->\r\n            <input id=\"memberId\" type=\"text\" name=\"memberId\" placeholder=\"아이디를 입력해주세요.\" required maxlength=\"15\">\r\n<!--            <span class=\"point successIdChk\"></span><br/>-->\r\n            <span class=\"point\">※ 영문자, 소문자 입력가능, 최대 15자 까지 입력</span>\r\n            <p id=\"idng\" style=\"color:red;\"></p>\r\n            <p id=\"idok\" style=\"color:green;\"></p>\r\n            <!--            <span class=\"point successNameChk\">아이디는 6자이상 입력해 주세요.</span>-->\r\n\r\n        </label>\r\n        <button class=\"btn btn-lg btn-primary btn-block\" id=\"rgAdm1\">중복확인</button>\r\n        <div>\r\n            <label for=\"memberPassword\">패스워드:\r\n                <input id=\"memberPassword\" name=\"memberPassword\" type=\"password\"\r\n                       required maxlength=\"8\" autocomplete=\"off\">\r\n                <span class=\"point\">* 비밀번호는 총 8자 까지 입력이 가능합니다.</span>\r\n            </label>\r\n        </div>\r\n        <div>\r\n            <label for=\"cmemberPassword\">패스워드 확인:\r\n                <input id=\"cmemberPassword\" name=\"cmemberPassword\" type=\"password\"\r\n                       placeholder=\"동일하게 입력해 주세요.\" required maxlength=\"8\" autocomplete=\"off\">\r\n                <p id=\"ng\" style=\"color:red;\"></p>\r\n                <p id=\"ok\" style=\"color:green;\"></p>\r\n            </label>\r\n\r\n        </div>\r\n\r\n        <div>\r\n            <label for=\"name1\">이름:\r\n                <input id=\"name1\" name=\"name1\" type=\"text\">\r\n            </label>\r\n        </div>\r\n        <div>\r\n            <label for=\"email\">email:\r\n                <input id=\"email\" name=\"email\" type=\"text\">\r\n            </label>\r\n        </div>\r\n        <div>\r\n\r\n            <label for=\"phonenumber\">휴대폰 번호:\r\n                <input type=\"tel\" name=\"phonenumber\" id=\"phonenumber\" title=\"전화번호를 입력하세요.\" placeholder=\"000-0000-0000\"\r\n                       pattern=\"[0-9]{2,3}-[0-9]{3,4}-[0-9]{3,4}\" maxlength=\"13\">\r\n            </label>\r\n        </div>\r\n        <div>\r\n            <label for=\"postalCode\">우편 번호:\r\n                <input id=\"postalCode\" name=\"postalCode\" type=\"text\">\r\n            </label>\r\n        </div>\r\n        <div>\r\n            <label for=\"address\">회원 주소:\r\n                <input id=\"address\" name=\"address\" type=\"text\">\r\n            </label>\r\n        </div>\r\n\r\n</fieldset>\r\n<button class=\"btn btn-lg btn-primary btn-block\" id=\"rgAdm\">회원가입</button>\r\n\r\n</body>\r\n\r\n\r\n<script>\r\n// 아이디 중복 확인\r\n    $('#rgAdm1').click(function () {\r\n        const memberId = $('#memberId').val();\r\n        const json = JSON.stringify({\r\n            memberId: memberId,\r\n        })\r\n        $.ajax({\r\n            url: '/api/singUp',\r\n            type: 'POST',\r\n            dataType: 'text',\r\n            contentType: \"application/json\",\r\n            data: json,\r\n            success: function (data) {\r\n                console.log(data)\r\n\r\n                if(memberId == \"\") {\r\n                    document.getElementById('idok').innerHTML = \"\"\r\n                    document.getElementById('idng').innerHTML = \"아이디를 입력해주세요.\"\r\n                } else {\r\n                    if (data == \"no\") {\r\n                        document.getElementById('idok').innerHTML = \"\"\r\n                        document.getElementById('idng').innerHTML = \"이미 등록된 회원이 었습니다\"\r\n                        return;\r\n\r\n                    } else if (data == \"ok\") {\r\n\r\n                        document.getElementById('idng').innerHTML = \"\"\r\n                        document.getElementById('idok').innerHTML = \"사용가능한 아이디 입니다.\"\r\n                        return;\r\n                    }\r\n                }\r\n            },\r\n        })\r\n\r\n    })\r\n\r\n    //비밀번호 확인\r\n    $(function () {\r\n        $('#cmemberPassword').blur(function () {\r\n            if ($('#memberPassword').val() != $('#cmemberPassword').val()) {\r\n                if ($('#cmemberPassword').val() != '') {\r\n                    document.getElementById('ng').innerHTML = \"동일한 비밀번호를 입력해 주세요\"\r\n                    // alert(\"비밀번호가 일치하지 않습니다.\");\r\n                    $('#cmemberPassword').val('');\r\n                    $('#cmemberPassword').focus();\r\n                }\r\n            } else {\r\n                document.getElementById('ng').innerHTML = \"\"\r\n                document.getElementById('ok').innerHTML = \"동일한 비밀번호 입니다\"\r\n            }\r\n        })\r\n    });\r\n\r\n//데이터 전송\r\n    $('#rgAdm').on(\"click\", function () {\r\n        const memberId = $('#memberId').val();\r\n        const memberPassword = $('#memberPassword').val();\r\n        const name1 = $(\"#name1\").val();\r\n\r\n        const email = $(\"#email\").val();\r\n        const phonenumber = $(\"#phonenumber\").val();\r\n        const address = $(\"#address\").val();\r\n        const postalCode = $(\"#postalCode\").val();\r\n        var type = 0;\r\n\r\n        if (memberId == \"\" || memberPassword == \"\") {\r\n            alert(\"아이디와 비밀번호는 필수기재사항입니다.\");\r\n        } else {\r\n            const json = JSON.stringify({\r\n                memberId: memberId,\r\n                memberPassword: memberPassword,\r\n                name1: name1,\r\n                type: type,\r\n                email: email,\r\n                phonenumber: phonenumber,\r\n                address: address,\r\n                postalCode: postalCode\r\n\r\n\r\n            })\r\n\r\n            $.ajax({\r\n                url: '/api/singUp1',\r\n                type: 'POST',\r\n                dataType: 'text',\r\n                contentType: \"application/json; charset=utf-8\",\r\n                data: json,\r\n                success: function (data) {\r\n                    console.log(data)\r\n                    window.location.href = '/Login';\r\n                },\r\n            })\r\n\r\n\r\n        }\r\n    });\r\n</script>\r\n\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/mrmberhoewongaib.html b/src/main/resources/templates/mrmberhoewongaib.html
--- a/src/main/resources/templates/mrmberhoewongaib.html	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/main/resources/templates/mrmberhoewongaib.html	(date 1649309460307)
@@ -41,33 +41,55 @@
         </div>
 
         <div>
-            <label for="name1">이름:
-                <input id="name1" name="name1" type="text">
+            <label for="memberName">이름:
+                <input id="memberName" name="memberName" type="text">
             </label>
         </div>
         <div>
-            <label for="email">email:
-                <input id="email" name="email" type="text">
+            <label for="memberEmail">email:
+                <input id="memberEmail" name="memberEmail" type="Email">
             </label>
         </div>
         <div>
 
-            <label for="phonenumber">휴대폰 번호:
-                <input type="tel" name="phonenumber" id="phonenumber" title="전화번호를 입력하세요." placeholder="000-0000-0000"
+            <label for="memberPhoneNumber">휴대폰 번호:
+                <input type="tel" name="memberPhoneNumber" id="memberPhoneNumber" title="전화번호를 입력하세요." placeholder="000-0000-0000"
                        pattern="[0-9]{2,3}-[0-9]{3,4}-[0-9]{3,4}" maxlength="13">
             </label>
         </div>
         <div>
-            <label for="postalCode">우편 번호:
-                <input id="postalCode" name="postalCode" type="text">
+            <label for="memberPostalCode">우편 번호:
+                <input id="memberPostalCode" name="memberPostalCode" type="text">
             </label>
         </div>
         <div>
-            <label for="address">회원 주소:
-                <input id="address" name="address" type="text">
+            <label for="memberAddress">회원 주소:
+                <input id="memberAddress" name="memberAddress" type="text">
             </label>
         </div>
 
+
+
+
+        <tr class="mobileNo">
+            <th>
+                <label for="phone">휴대폰 번호</label>
+            </th>
+            <td>
+                <p>
+                    <input id="memberPhoneNumber" type="text" name="memberPhoneNumber" title="전화번호 입력" required/>
+                    <span id="phoneChk" class="doubleChk">인증번호 보내기</span><br/>
+                    <input id="phone2" type="text" name="phone2" title="인증번호 입력" disabled required/>
+                    <span id="phoneChk2" class="doubleChk">본인인증</span>
+                    <span class="point successPhoneChk">휴대폰 번호 입력후 인증번호 보내기를 해주십시오.</span>
+                    <input type="hidden" id="phoneDoubleChk"/>
+                </p>
+                <p class="tip">
+                    최초 가입 시에만 사용하고 있습니다. 따로 저장되지 않습니다.(번호만 입력해주세요.)
+                </p>
+            </td>
+        </tr>
+
 </fieldset>
 <button class="btn btn-lg btn-primary btn-block" id="rgAdm">회원가입</button>
 
@@ -75,6 +97,13 @@
 
 
 <script>
+
+
+
+    const toISOStringDate = new Date().toISOString();
+    console.log('toISOStringDate : ' + toISOStringDate);
+    // toISOStringDate : 2021-08-08T02:22:13.141Z
+
 // 아이디 중복 확인
     $('#rgAdm1').click(function () {
         const memberId = $('#memberId').val();
@@ -88,9 +117,9 @@
             contentType: "application/json",
             data: json,
             success: function (data) {
-                console.log(data)
+                console.log("????" + data)
 
-                if(memberId == "") {
+                if(data="ng") {
                     document.getElementById('idok').innerHTML = ""
                     document.getElementById('idng').innerHTML = "아이디를 입력해주세요."
                 } else {
@@ -132,13 +161,13 @@
     $('#rgAdm').on("click", function () {
         const memberId = $('#memberId').val();
         const memberPassword = $('#memberPassword').val();
-        const name1 = $("#name1").val();
-
-        const email = $("#email").val();
-        const phonenumber = $("#phonenumber").val();
-        const address = $("#address").val();
-        const postalCode = $("#postalCode").val();
-        var type = 0;
+        const memberName = $("#memberName").val();
+        const memberJoinDate = toISOStringDate
+        const memberEmail = $("#memberEmail").val();
+        const memberPhoneNumber = $("#memberPhoneNumber").val();
+        const memberAddress = $("#memberAddress").val();
+        const memberPostalCode = $("#memberPostalCode").val();
+        var memberType = 0;
 
         if (memberId == "" || memberPassword == "") {
             alert("아이디와 비밀번호는 필수기재사항입니다.");
@@ -146,16 +175,15 @@
             const json = JSON.stringify({
                 memberId: memberId,
                 memberPassword: memberPassword,
-                name1: name1,
-                type: type,
-                email: email,
-                phonenumber: phonenumber,
-                address: address,
-                postalCode: postalCode
-
-
+                memberName: memberName,
+                memberType: memberType,
+                memberEmail: memberEmail,
+                memberPhoneNumber: memberPhoneNumber,
+                memberAddress: memberAddress,
+                memberPostalCode: memberPostalCode,
+                memberJoinDate
             })
-
+        console.log(json)
             $.ajax({
                 url: '/api/singUp1',
                 type: 'POST',
Index: src/main/java/ReBack/core/data/Member.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ReBack.core.data;\r\n\r\n\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\nimport javax.persistence.*;\r\n\r\n@NoArgsConstructor\r\n@Getter\r\n@Setter\r\n@Entity\r\n@Table(name = \"member\")\r\npublic class Member {\r\n\r\n\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"member_code\", length = 15)\r\n    public Long memberCode;\r\n\r\n    @Id\r\n    @Column(name = \"member_id\", length = 15)\r\n    private String memberId;\r\n\r\n    @Column(name = \"member_name\", length = 10)\r\n    private String name1;\r\n\r\n    @Column(name = \"member_password\", length = 60)\r\n    private String memberPassword;\r\n\r\n    @Column(name = \"member_email\", length = 50)\r\n    private String email;\r\n\r\n    @Column(name = \"member_phonenumber\", length = 11)\r\n    private String phonenumber;\r\n\r\n    @Column(name = \"member_postalCode\", length = 10)\r\n    private String postalCode;\r\n\r\n    @Column(name = \"member_address\", length = 255)\r\n    private String address;\r\n\r\n    @Column(name = \"member_point\", length = 7)\r\n    private String point;\r\n\r\n    @Column(name = \"member_howjoin\", length = 1)\r\n    private String howjoin;\r\n\r\n    @Column(name = \"member_withdrawal\", length = 30)\r\n    private String withdrawal;\r\n\r\n    @Column(name = \"mebmer_business_number\", length = 10)\r\n    private String businessnumber;\r\n\r\n    @Column(name = \"member_type\", length = 1)\r\n    private String type;\r\n\r\n\r\n    public Long getMemberCode() {\r\n        return memberCode;\r\n    }\r\n\r\n    public void setMemberCode(Long memberCode) {\r\n        this.memberCode = memberCode;\r\n    }\r\n\r\n    public String getMemberId() {\r\n        return memberId;\r\n    }\r\n\r\n    public void setMemberId(String memberId) {\r\n        this.memberId = memberId;\r\n    }\r\n\r\n    public String getName() {\r\n        return name1;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name1 = name;\r\n    }\r\n\r\n    public String getMemberPassword() {\r\n        return memberPassword;\r\n    }\r\n\r\n    public void setMemberPassword(String memberPassword) {\r\n        this.memberPassword = memberPassword;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public String getPhonenumber() {\r\n        return phonenumber;\r\n    }\r\n\r\n    public void setPhonenumber(String phonenumber) {\r\n        this.phonenumber = phonenumber;\r\n    }\r\n\r\n    public String getPostalCode() {\r\n        return postalCode;\r\n    }\r\n\r\n    public void setPostalCode(String postalCode) {\r\n        this.postalCode = postalCode;\r\n    }\r\n\r\n    public String getAddress() {\r\n        return address;\r\n    }\r\n\r\n    public void setAddress(String address) {\r\n        this.address = address;\r\n    }\r\n\r\n    public String getPoint() {\r\n        return point;\r\n    }\r\n\r\n    public void setPoint(String point) {\r\n        this.point = point;\r\n    }\r\n\r\n    public String getHowjoin() {\r\n        return howjoin;\r\n    }\r\n\r\n    public void setHowjoin(String howjoin) {\r\n        this.howjoin = howjoin;\r\n    }\r\n\r\n    public String getWithdrawal() {\r\n        return withdrawal;\r\n    }\r\n\r\n    public void setWithdrawal(String withdrawal) {\r\n        this.withdrawal = withdrawal;\r\n    }\r\n\r\n    public String getBusinessnumber() {\r\n        return businessnumber;\r\n    }\r\n\r\n    public void setBusinessnumber(String businessnumber) {\r\n        this.businessnumber = businessnumber;\r\n    }\r\n\r\n    public String getType() {\r\n        return type;\r\n    }\r\n\r\n    public void setType(String type) {\r\n        this.type = type;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Member.java b/src/main/java/ReBack/core/data/Member.java
--- a/src/main/java/ReBack/core/data/Member.java	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/main/java/ReBack/core/data/Member.java	(date 1649310187783)
@@ -1,164 +1,62 @@
 package ReBack.core.data;
 
-
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
+import lombok.*;
 import javax.persistence.*;
+import java.time.LocalDateTime;
 
-@NoArgsConstructor
+
+@Entity
+@ToString
 @Getter
 @Setter
-@Entity
-@Table(name = "member")
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
 public class Member {
-
-
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "member_code", length = 15)
-    public Long memberCode;
-
+    @SequenceGenerator(name = "member_seq_generator",
+            sequenceName = "member_seq",
+            initialValue = 1, allocationSize = 1)
     @Id
-    @Column(name = "member_id", length = 15)
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "member_seq_generator")
+    private Long memberCode;
+
+    @Column(length=30, nullable = false)
     private String memberId;
 
-    @Column(name = "member_name", length = 10)
-    private String name1;
+    @Column(length=10, nullable = false)
+    private String memberName;
 
-    @Column(name = "member_password", length = 60)
+    @Column(length=30, nullable = false)
     private String memberPassword;
 
-    @Column(name = "member_email", length = 50)
-    private String email;
-
-    @Column(name = "member_phonenumber", length = 11)
-    private String phonenumber;
-
-    @Column(name = "member_postalCode", length = 10)
-    private String postalCode;
-
-    @Column(name = "member_address", length = 255)
-    private String address;
-
-    @Column(name = "member_point", length = 7)
-    private String point;
-
-    @Column(name = "member_howjoin", length = 1)
-    private String howjoin;
-
-    @Column(name = "member_withdrawal", length = 30)
-    private String withdrawal;
-
-    @Column(name = "mebmer_business_number", length = 10)
-    private String businessnumber;
-
-    @Column(name = "member_type", length = 1)
-    private String type;
-
-
-    public Long getMemberCode() {
-        return memberCode;
-    }
-
-    public void setMemberCode(Long memberCode) {
-        this.memberCode = memberCode;
-    }
-
-    public String getMemberId() {
-        return memberId;
-    }
-
-    public void setMemberId(String memberId) {
-        this.memberId = memberId;
-    }
-
-    public String getName() {
-        return name1;
-    }
-
-    public void setName(String name) {
-        this.name1 = name;
-    }
-
-    public String getMemberPassword() {
-        return memberPassword;
-    }
+    @Column(length=50, nullable = false)
+    private String memberEmail;
 
-    public void setMemberPassword(String memberPassword) {
-        this.memberPassword = memberPassword;
-    }
+    @Column(length=11, nullable = false)
+    private String memberPhoneNumber;
 
-    public String getEmail() {
-        return email;
-    }
+    @Column(length=10, nullable = false)
+    private int memberPostalCode;
 
-    public void setEmail(String email) {
-        this.email = email;
-    }
+    @Column(nullable = false)
+    private String memberAddress;
 
-    public String getPhonenumber() {
-        return phonenumber;
-    }
+    @Column(length=10)
+    private int memberPoint;
 
-    public void setPhonenumber(String phonenumber) {
-        this.phonenumber = phonenumber;
-    }
+    @Column(length=20)
+    private MemberHowJoin memberHowJoin;
 
-    public String getPostalCode() {
-        return postalCode;
-    }
+    @Column(length=30)
+    private MemberWithdrawal memberWithdrawal;
 
-    public void setPostalCode(String postalCode) {
-        this.postalCode = postalCode;
-    }
+    @Column(length=10, nullable = false)
+    private int memberBusinessNumber;
 
-    public String getAddress() {
-        return address;
-    }
+    @Column(length=20, nullable = false)
+    private  MemberType memberType;
 
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    public String getPoint() {
-        return point;
-    }
-
-    public void setPoint(String point) {
-        this.point = point;
-    }
-
-    public String getHowjoin() {
-        return howjoin;
-    }
-
-    public void setHowjoin(String howjoin) {
-        this.howjoin = howjoin;
-    }
-
-    public String getWithdrawal() {
-        return withdrawal;
-    }
-
-    public void setWithdrawal(String withdrawal) {
-        this.withdrawal = withdrawal;
-    }
-
-    public String getBusinessnumber() {
-        return businessnumber;
-    }
-
-    public void setBusinessnumber(String businessnumber) {
-        this.businessnumber = businessnumber;
-    }
-
-    public String getType() {
-        return type;
-    }
-
-    public void setType(String type) {
-        this.type = type;
-    }
-
+    @Column(nullable = false)
+    private LocalDateTime memberJoinDate;
+    
 }
Index: src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#spring:\r\n#  output:\r\n#    ansi:\r\n#      enabled: always\r\n#\r\n#  datasource: # 여기가 DB 설정하는 곳\r\n#    url: jdbc:oracle:thin:@reback_high?TNS_ADMIN=./src/main/resources/wallet/Wallet_ReBack\r\n#    username: admin\r\n#    password: CapstoneTeam2\r\n#    driver-class-name: oracle.jdbc.OracleDriver\r\n#\r\n#  jpa:\r\n#    hibernate:\r\n#      ddl-auto: update # 애플리케이션 실행시점에 내가 가지고 있는 테이블 제거(drop) 후 다시 생성\r\n##    properties:\r\n##      hibernate:\r\n##        format_sql: true\r\n#\r\n#logging: # 로거를 통해 로그 출력\r\n#  level:\r\n#    org.hibernate.SQL: debug # 로거를 통해 hibernate 실행 SQL을 남긴다.\r\n#\r\n#server:\r\n#  port: 8086\r\n\r\nspring:\r\n  output:\r\n    ansi:\r\n      enabled: always\r\n\r\n  datasource: # 여기가 DB 설정하는 곳\r\n    url: jdbc:oracle:thin:@10.30.3.95:1521:orcl\r\n    username: c##1701225\r\n    password: p1701225\r\n    driver-class-name: oracle.jdbc.OracleDriver\r\n\r\n  jpa:\r\n    hibernate:\r\n      ddl-auto: update                                                                       # 애플리케이션 실행시점에 내가 가지고 있는 테이블 제거(drop) 후 다시 생성\r\n#    properties:\r\n#      hibernate:\r\n#        format_sql: true\r\n\r\nlogging: # 로거를 통해 로그 출력\r\n  level:\r\n    org.hibernate.SQL: debug # 로거를 통해 hibernate 실행 SQL을 남긴다.\r\n\r\nserver:\r\n  port: 8086
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
--- a/src/main/resources/application.yml	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/main/resources/application.yml	(date 1649308416322)
@@ -1,42 +1,17 @@
-#spring:
-#  output:
-#    ansi:
-#      enabled: always
-#
-#  datasource: # 여기가 DB 설정하는 곳
-#    url: jdbc:oracle:thin:@reback_high?TNS_ADMIN=./src/main/resources/wallet/Wallet_ReBack
-#    username: admin
-#    password: CapstoneTeam2
-#    driver-class-name: oracle.jdbc.OracleDriver
-#
-#  jpa:
-#    hibernate:
-#      ddl-auto: update # 애플리케이션 실행시점에 내가 가지고 있는 테이블 제거(drop) 후 다시 생성
-##    properties:
-##      hibernate:
-##        format_sql: true
-#
-#logging: # 로거를 통해 로그 출력
-#  level:
-#    org.hibernate.SQL: debug # 로거를 통해 hibernate 실행 SQL을 남긴다.
-#
-#server:
-#  port: 8086
-
 spring:
   output:
     ansi:
       enabled: always
 
   datasource: # 여기가 DB 설정하는 곳
-    url: jdbc:oracle:thin:@10.30.3.95:1521:orcl
-    username: c##1701225
-    password: p1701225
+    url: jdbc:oracle:thin:@reback_high?TNS_ADMIN=./src/main/resources/wallet/Wallet_ReBack
+    username: admin
+    password: CapstoneTeam2
     driver-class-name: oracle.jdbc.OracleDriver
 
   jpa:
     hibernate:
-      ddl-auto: update                                                                       # 애플리케이션 실행시점에 내가 가지고 있는 테이블 제거(drop) 후 다시 생성
+      ddl-auto: update # 애플리케이션 실행시점에 내가 가지고 있는 테이블 제거(drop) 후 다시 생성
 #    properties:
 #      hibernate:
 #        format_sql: true
@@ -46,4 +21,29 @@
     org.hibernate.SQL: debug # 로거를 통해 hibernate 실행 SQL을 남긴다.
 
 server:
-  port: 8086
\ No newline at end of file
+  port: 8086
+
+#spring:
+#  output:
+#    ansi:
+#      enabled: always
+#
+#  datasource: # 여기가 DB 설정하는 곳
+#   url: jdbc:oracle:thin:@10.30.3.95:1521:orcl
+#     username: admin1997
+#    password: root
+#    driver-class-name: oracle.jdbc.OracleDriver
+#
+#  jpa:
+#    hibernate:
+#      ddl-auto: update                                                                       # 애플리케이션 실행시점에 내가 가지고 있는 테이블 제거(drop) 후 다시 생성
+##    properties:
+##      hibernate:
+##        format_sql: true
+#
+#logging: # 로거를 통해 로그 출력
+#  level:
+#    org.hibernate.SQL: debug # 로거를 통해 hibernate 실행 SQL을 남긴다.
+#
+#server:
+#  port: 8086
\ No newline at end of file
Index: src/main/java/ReBack/core/data/PayMeans.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/PayMeans.java b/src/main/java/ReBack/core/data/PayMeans.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/PayMeans.java	(date 1648719706000)
@@ -0,0 +1,48 @@
+package ReBack.core.data;
+
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class PayMeans {
+    @SequenceGenerator(name = "pay_means_seq_generator",
+            sequenceName = "pay_means_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pay_means_seq_generator")
+    private Long payMeansCode;
+
+    @Column(length=10, nullable = false, name="pay_means_type")
+    private String payType;
+
+    @Column(length=4, name="pay_means_validity")
+    private int payValidity;
+
+    @Column(length=15, name="pay_means_company")
+    private String payCompany;
+
+    @Column(name="pay_means_password")
+    private int payPasswd;
+
+    @Column(name="pay_means_bank_number")
+    private int payBankNum;
+
+    @Column(name="pay_means_card_number")
+    private int payCardNum;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+    @ManyToOne
+    @JoinColumn(name="pay_code")
+    private Pay pay;
+
+}
Index: src/main/java/ReBack/core/data/MemberDesign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/MemberDesign.java b/src/main/java/ReBack/core/data/MemberDesign.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/MemberDesign.java	(date 1648719706000)
@@ -0,0 +1,44 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class MemberDesign {
+    @SequenceGenerator(name = "member_design_seq_generator",
+            sequenceName = "member_design_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "member_design_seq_generator")
+    private Long memberDesignCode;
+
+    @Column(name="member_design_name", length=50, nullable = false)
+    private String designName;
+
+    @Column(name="memer_design_open_status", length=1, nullable = false)
+    private int designStatus;
+
+    @Column(name="member_design_image_path", nullable = false)
+    private String designPath;
+
+    @Column(name="member_design_update_date")
+    private LocalDateTime designDate;
+
+    @Column(name="member_design_registration_date")
+    private LocalDateTime designRegistrationDate;
+
+    @ManyToOne
+    @JoinColumn(name="design_code")
+    private Design design;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+}
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n\tid 'org.springframework.boot' version '2.6.4'\r\n\tid 'io.spring.dependency-management' version '1.0.11.RELEASE'\r\n\tid 'java'\r\n}\r\n\r\ngroup = 'ReBack'\r\nversion = '0.0.1-SNAPSHOT'\r\nsourceCompatibility = '11'\r\n\r\nrepositories {\r\n\tmavenCentral()\r\n}\r\n\r\ndependencies {\r\n\timplementation 'org.springframework.boot:spring-boot-starter-validation'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-data-jpa'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-security'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-thymeleaf'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\r\n\timplementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'\r\n\timplementation 'org.projectlombok:lombok:1.18.20'\r\n\timplementation 'org.projectlombok:lombok:1.18.20'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-security'\r\n    implementation 'org.jetbrains:annotations:20.1.0'\r\n    developmentOnly 'org.springframework.boot:spring-boot-devtools'\r\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\r\n\ttestImplementation 'org.springframework.security:spring-security-test'\r\n\r\n\t// 오라클 클라우드에 접속하기 위한 라이브러리 추가\r\n\truntimeOnly 'com.oracle.database.jdbc:ojdbc8'\r\n\timplementation 'com.oracle.database.security:osdt_cert'\r\n\timplementation 'com.oracle.database.security:oraclepki'\r\n\timplementation 'com.oracle.database.security:osdt_core'\r\n}\r\n\r\ntasks.named('test') {\r\n\tuseJUnitPlatform()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/build.gradle	(date 1649308519702)
@@ -2,6 +2,7 @@
 	id 'org.springframework.boot' version '2.6.4'
 	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
 	id 'java'
+
 }
 
 group = 'ReBack'
@@ -13,20 +14,19 @@
 }
 
 dependencies {
-	implementation 'org.springframework.boot:spring-boot-starter-validation'
 	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
 	implementation 'org.springframework.boot:spring-boot-starter-security'
 	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
 	implementation 'org.springframework.boot:spring-boot-starter-web'
 	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
-	implementation 'org.projectlombok:lombok:1.18.20'
-	implementation 'org.projectlombok:lombok:1.18.20'
-	implementation 'org.springframework.boot:spring-boot-starter-security'
-    implementation 'org.jetbrains:annotations:20.1.0'
+	implementation 'org.projectlombok:lombok'
+    implementation 'org.springframework.boot:spring-boot-starter-security'
     developmentOnly 'org.springframework.boot:spring-boot-devtools'
+	annotationProcessor 'org.projectlombok:lombok'
 	testImplementation 'org.springframework.boot:spring-boot-starter-test'
 	testImplementation 'org.springframework.security:spring-security-test'
-
+	implementation 'net.nurigo:javaSDK:2.2'
+//	compile group: 'net.nurigo', name: 'javaSDK', version: '2.2'
 	// 오라클 클라우드에 접속하기 위한 라이브러리 추가
 	runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
 	implementation 'com.oracle.database.security:osdt_cert'
Index: src/main/resources/templates/company.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html xmlns:th=\"http://www.thymeleaf.org\">\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Index</title>\r\n    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"\r\n            integrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\"\r\n            crossorigin=\"anonymous\"></script>\r\n</head>\r\n<body>\r\n<fieldset>\r\n    <legend>필수입력사항</legend>\r\n    <div>\r\n        <label for=\"memberId\">아이디:\r\n            <input id=\"memberId\" name=\"memberId\" type=\"text\">\r\n        </label>\r\n    <div>\r\n        <label for=\"memberPassword\">패스워드:\r\n            <input id=\"memberPassword\" name=\"memberPassword\" type=\"password\">\r\n        </label>\r\n    </div>\r\n    <div>\r\n        <label for=\"name1\">이름:\r\n            <input id=\"name1\" name=\"name1\" type=\"text\">\r\n        </label>\r\n    </div>\r\n\r\n    <!--  <select id=\"type\" name=\"type\">-->\r\n    <!--    <option value=\"1\">일반회원</option>-->\r\n    <!--    <option value=\"2\">작가회원</option>-->\r\n    <!--    <option value=\"3\">업체회원</option>-->\r\n    <!--  </select>-->\r\n\r\n</fieldset>\r\n<button class=\"btn btn-lg btn-primary btn-block\" id=\"rgAdm\">회원가입</button>\r\n\r\n</body>\r\n\r\n\r\n<script>\r\n    $('#rgAdm').on(\"click\",function() {\r\n        const memberId = $('#memberId').val();\r\n        const memberPassword = $('#memberPassword').val();\r\n        const name1 = $(\"#name1\").val();\r\n        var type = 2;\r\n\r\n\r\n        if(memberId == \"\" || memberPassword == \"\") {\r\n            alert(\"아이디와 비밀번호는 필수기재사항입니다.\");\r\n        } else {\r\n            const json = JSON.stringify({\r\n                memberId: memberId,\r\n                memberPassword: memberPassword,\r\n                name1: name1,\r\n                type: type\r\n            })\r\n\r\n            $.ajax({\r\n                url: '/api/singUp',\r\n                type: 'POST',\r\n                dataType: 'text',\r\n                contentType: \"application/json; charset=utf-8\",\r\n                data: json,\r\n\r\n                success: function(data) {\r\n                    console.log(data)\r\n\r\n                    if (data == \"no\") {\r\n                        alert(\"이미 등록된 회원이 었습니다.\");\r\n                    }\r\n                    else if (data == \"ok\"){\r\n                        alert(\"회원 가입 완료!.\");\r\n                        alert(\"로그인 페이지로 이동합니다.\");\r\n                        window.location.href = '/Login';\r\n                    }\r\n                },\r\n            })\r\n\r\n\r\n        }\r\n    });\r\n</script>\r\n\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/company.html b/src/main/resources/templates/company.html
--- a/src/main/resources/templates/company.html	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/main/resources/templates/company.html	(date 1649308519706)
@@ -1,85 +1,0 @@
-<!DOCTYPE html>
-<html xmlns:th="http://www.thymeleaf.org">
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <title>Index</title>
-    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
-            integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
-            crossorigin="anonymous"></script>
-</head>
-<body>
-<fieldset>
-    <legend>필수입력사항</legend>
-    <div>
-        <label for="memberId">아이디:
-            <input id="memberId" name="memberId" type="text">
-        </label>
-    <div>
-        <label for="memberPassword">패스워드:
-            <input id="memberPassword" name="memberPassword" type="password">
-        </label>
-    </div>
-    <div>
-        <label for="name1">이름:
-            <input id="name1" name="name1" type="text">
-        </label>
-    </div>
-
-    <!--  <select id="type" name="type">-->
-    <!--    <option value="1">일반회원</option>-->
-    <!--    <option value="2">작가회원</option>-->
-    <!--    <option value="3">업체회원</option>-->
-    <!--  </select>-->
-
-</fieldset>
-<button class="btn btn-lg btn-primary btn-block" id="rgAdm">회원가입</button>
-
-</body>
-
-
-<script>
-    $('#rgAdm').on("click",function() {
-        const memberId = $('#memberId').val();
-        const memberPassword = $('#memberPassword').val();
-        const name1 = $("#name1").val();
-        var type = 2;
-
-
-        if(memberId == "" || memberPassword == "") {
-            alert("아이디와 비밀번호는 필수기재사항입니다.");
-        } else {
-            const json = JSON.stringify({
-                memberId: memberId,
-                memberPassword: memberPassword,
-                name1: name1,
-                type: type
-            })
-
-            $.ajax({
-                url: '/api/singUp',
-                type: 'POST',
-                dataType: 'text',
-                contentType: "application/json; charset=utf-8",
-                data: json,
-
-                success: function(data) {
-                    console.log(data)
-
-                    if (data == "no") {
-                        alert("이미 등록된 회원이 었습니다.");
-                    }
-                    else if (data == "ok"){
-                        alert("회원 가입 완료!.");
-                        alert("로그인 페이지로 이동합니다.");
-                        window.location.href = '/Login';
-                    }
-                },
-            })
-
-
-        }
-    });
-</script>
-
-</html>
\ No newline at end of file
Index: src/main/resources/templates/writer.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html xmlns:th=\"http://www.thymeleaf.org\">\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Index</title>\r\n  <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"\r\n          integrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\"\r\n          crossorigin=\"anonymous\"></script>\r\n</head>\r\n<body>\r\n<fieldset>\r\n  <legend>필수입력사항</legend>\r\n  <div>\r\n\r\n    <label for=\"memberId\">아이디:\r\n      <input id=\"memberId\" name=\"memberId\" type=\"text\">\r\n    </label>\r\n  </div>일반회원\r\n  <div>\r\n    <label for=\"memberPassword\">패스워드:\r\n      <input id=\"memberPassword\" name=\"memberPassword\" type=\"password\">\r\n    </label>\r\n  </div>\r\n  <div>\r\n    <label for=\"name1\">이름:\r\n      <input id=\"name1\" name=\"name1\" type=\"text\">\r\n    </label>\r\n  </div>\r\n\r\n<!--  <select id=\"type\" name=\"type\">-->\r\n<!--    <option value=\"1\">일반회원</option>-->\r\n<!--    <option value=\"2\">작가회원</option>-->\r\n<!--    <option value=\"3\">업체회원</option>-->\r\n<!--  </select>-->\r\n\r\n</fieldset>\r\n<button class=\"btn btn-lg btn-primary btn-block\" id=\"rgAdm\">회원가입</button>\r\n\r\n</body>\r\n\r\n\r\n<script>\r\n  $('#rgAdm').on(\"click\",function() {\r\n    const memberId = $('#memberId').val();\r\n    const memberPassword = $('#memberPassword').val();\r\n    const name1 = $(\"#name1\").val();\r\n    var type = 2;\r\n\r\n    if(memberId == \"\" || memberPassword == \"\") {\r\n      alert(\"아이디와 비밀번호는 필수기재사항입니다.\");\r\n    } else {\r\n      const json = JSON.stringify({\r\n        memberId: memberId,\r\n        memberPassword: memberPassword,\r\n        name1: name1,\r\n        type: type\r\n    })\r\n\r\n      $.ajax({\r\n        url: '/api/singUp',\r\n        type: 'POST',\r\n        dataType: 'text',\r\n        contentType: \"application/json; charset=utf-8\",\r\n        data: json,\r\n        success: function(data) {\r\n          console.log(data)\r\n\r\n          if (data == \"no\") {\r\n            alert(\"이미 등록된 회원이 었습니다.\");\r\n          }\r\n          else if (data == \"ok\"){\r\n            alert(\"회원 가입 완료!.\");\r\n            alert(\"로그인 페이지로 이동합니다.\");\r\n            window.location.href = '/Login';\r\n          }\r\n        },\r\n      })\r\n\r\n\r\n    }\r\n  });\r\n</script>\r\n\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/writer.html b/src/main/resources/templates/writer.html
--- a/src/main/resources/templates/writer.html	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/main/resources/templates/writer.html	(date 1649308519705)
@@ -1,85 +1,0 @@
-<!DOCTYPE html>
-<html xmlns:th="http://www.thymeleaf.org">
-<html lang="en">
-<head>
-  <meta charset="UTF-8">
-  <title>Index</title>
-  <script src="https://code.jquery.com/jquery-3.5.1.min.js"
-          integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
-          crossorigin="anonymous"></script>
-</head>
-<body>
-<fieldset>
-  <legend>필수입력사항</legend>
-  <div>
-
-    <label for="memberId">아이디:
-      <input id="memberId" name="memberId" type="text">
-    </label>
-  </div>일반회원
-  <div>
-    <label for="memberPassword">패스워드:
-      <input id="memberPassword" name="memberPassword" type="password">
-    </label>
-  </div>
-  <div>
-    <label for="name1">이름:
-      <input id="name1" name="name1" type="text">
-    </label>
-  </div>
-
-<!--  <select id="type" name="type">-->
-<!--    <option value="1">일반회원</option>-->
-<!--    <option value="2">작가회원</option>-->
-<!--    <option value="3">업체회원</option>-->
-<!--  </select>-->
-
-</fieldset>
-<button class="btn btn-lg btn-primary btn-block" id="rgAdm">회원가입</button>
-
-</body>
-
-
-<script>
-  $('#rgAdm').on("click",function() {
-    const memberId = $('#memberId').val();
-    const memberPassword = $('#memberPassword').val();
-    const name1 = $("#name1").val();
-    var type = 2;
-
-    if(memberId == "" || memberPassword == "") {
-      alert("아이디와 비밀번호는 필수기재사항입니다.");
-    } else {
-      const json = JSON.stringify({
-        memberId: memberId,
-        memberPassword: memberPassword,
-        name1: name1,
-        type: type
-    })
-
-      $.ajax({
-        url: '/api/singUp',
-        type: 'POST',
-        dataType: 'text',
-        contentType: "application/json; charset=utf-8",
-        data: json,
-        success: function(data) {
-          console.log(data)
-
-          if (data == "no") {
-            alert("이미 등록된 회원이 었습니다.");
-          }
-          else if (data == "ok"){
-            alert("회원 가입 완료!.");
-            alert("로그인 페이지로 이동합니다.");
-            window.location.href = '/Login';
-          }
-        },
-      })
-
-
-    }
-  });
-</script>
-
-</html>
\ No newline at end of file
Index: src/main/resources/templates/Login.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html xmlns:th=\"http://www.thymeleaf.org\">\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"\r\n            integrity=\"sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=\"\r\n            crossorigin=\"anonymous\"></script>\r\n</head>\r\n\r\n\r\n\r\n\r\n\r\n<body class=\"text-center\">\r\n\r\n<h1 class=\"h3 mb-3 font-weight-normal\">관리자 로그인</h1>\r\n<label for=\"memberId\">아이디: </label>\r\n<input id=\"memberId\" name=\"memberId\" type=\"text\">\r\n<label for=\"memberPassword\">패스워드: </label>\r\n<input id=\"memberPassword\" name=\"memberPassword\" type=\"password\">\r\n\r\n<button class=\"btn btn-lg btn-primary btn-block\" id=\"login\">로그인</button>\r\n</body>\r\n\r\n<script src=\"https://code.jquery.com/jquery-3.6.0.js\" integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\r\n        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\r\n        crossorigin=\"anonymous\"></script>\r\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\r\n        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\r\n        crossorigin=\"anonymous\"></script>\r\n<script>\r\n    $('#login').on(\"click\",function(){\r\n        const memberId=$('#memberId').val();\r\n        const memberPassword=$('#memberPassword').val();\r\n\r\n        const json=JSON.stringify({\r\n            memberId:memberId,\r\n            memberPassword:memberPassword\r\n        });\r\n\r\n        $.ajax({\r\n            url:'/api/Login',\r\n            type:'POST',\r\n            dataType: 'json',\r\n            contentType: \"application/json; charset=utf-8\",\r\n            data:json,\r\n\r\n            complete:function(data){\r\n                const result = data.responseText;\r\n\r\n                if(result==\"ok\"){\r\n                    alert(\"로그인 성공\");\r\n                    alert(\"관리자 페이지로 이동합니다.\");\r\n                    window.location.href = '/index.html';\r\n                }\r\n                else{\r\n                    alert(\"회원정보가 일치하지 않습니다.\");\r\n                }\r\n            }\r\n        });\r\n    });\r\n</script>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/Login.html b/src/main/resources/templates/Login.html
--- a/src/main/resources/templates/Login.html	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/main/resources/templates/Login.html	(date 1649308519708)
@@ -1,66 +1,0 @@
-<!DOCTYPE html>
-<html xmlns:th="http://www.thymeleaf.org">
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <title>Title</title>
-    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
-            integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
-            crossorigin="anonymous"></script>
-</head>
-
-
-
-
-
-<body class="text-center">
-
-<h1 class="h3 mb-3 font-weight-normal">관리자 로그인</h1>
-<label for="memberId">아이디: </label>
-<input id="memberId" name="memberId" type="text">
-<label for="memberPassword">패스워드: </label>
-<input id="memberPassword" name="memberPassword" type="password">
-
-<button class="btn btn-lg btn-primary btn-block" id="login">로그인</button>
-</body>
-
-<script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=" crossorigin="anonymous"></script>
-<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
-        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
-        crossorigin="anonymous"></script>
-<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
-        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
-        crossorigin="anonymous"></script>
-<script>
-    $('#login').on("click",function(){
-        const memberId=$('#memberId').val();
-        const memberPassword=$('#memberPassword').val();
-
-        const json=JSON.stringify({
-            memberId:memberId,
-            memberPassword:memberPassword
-        });
-
-        $.ajax({
-            url:'/api/Login',
-            type:'POST',
-            dataType: 'json',
-            contentType: "application/json; charset=utf-8",
-            data:json,
-
-            complete:function(data){
-                const result = data.responseText;
-
-                if(result=="ok"){
-                    alert("로그인 성공");
-                    alert("관리자 페이지로 이동합니다.");
-                    window.location.href = '/index.html';
-                }
-                else{
-                    alert("회원정보가 일치하지 않습니다.");
-                }
-            }
-        });
-    });
-</script>
-</html>
\ No newline at end of file
Index: src/main/resources/templates/tjsxpr.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n<button type=\"button\" class=\"navyBtn\" onClick=\"location.href='/mrmberhoewongaib'\">일반</button>\r\n<button type=\"button\" class=\"navyBtn\" onClick=\"location.href='/writer'\">작가</button>\r\n<button type=\"button\" class=\"navyBtn\" onClick=\"location.href='/company'\">업체</button>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/templates/tjsxpr.html b/src/main/resources/templates/tjsxpr.html
--- a/src/main/resources/templates/tjsxpr.html	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/main/resources/templates/tjsxpr.html	(date 1649308519707)
@@ -1,12 +1,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <title>Title</title>
-</head>
-<body>
-<button type="button" class="navyBtn" onClick="location.href='/mrmberhoewongaib'">일반</button>
-<button type="button" class="navyBtn" onClick="location.href='/writer'">작가</button>
-<button type="button" class="navyBtn" onClick="location.href='/company'">업체</button>
-</body>
-</html>
\ No newline at end of file
Index: src/test/java/ReBack/core/CoreApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ReBack.core;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\n@SpringBootTest\r\nclass CoreApplicationTests {\r\n\r\n\t@Test\r\n\tvoid contextLoads() {\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ReBack/core/CoreApplicationTests.java b/src/test/java/ReBack/core/CoreApplicationTests.java
--- a/src/test/java/ReBack/core/CoreApplicationTests.java	(revision 86986677e53b0320e846a8521e788f29b9bf8d5c)
+++ b/src/test/java/ReBack/core/CoreApplicationTests.java	(date 1649308519704)
@@ -1,13 +1,0 @@
-package ReBack.core;
-
-import org.junit.jupiter.api.Test;
-import org.springframework.boot.test.context.SpringBootTest;
-
-@SpringBootTest
-class CoreApplicationTests {
-
-	@Test
-	void contextLoads() {
-	}
-
-}
Index: src/main/java/ReBack/core/data/Comment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Comment.java b/src/main/java/ReBack/core/data/Comment.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Comment.java	(date 1648719706000)
@@ -0,0 +1,55 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name="tbl_comment")
+public class Comment {
+    @SequenceGenerator(name = "comment_seq_generator",
+            sequenceName = "comment_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "comment_seq_generator")
+    private Long commentCode;
+
+    @Column(length=100, nullable = false)
+    private String commentTitle;
+
+    @Column(length=500, nullable = false)
+    private String commentContent;
+
+    @Column(nullable = false, name="comment_writing_time")
+    private LocalDateTime writingTime;
+
+    @Column(nullable = false, length=5)
+    private int commentViews;
+
+    @Column(nullable = false, length=5, name="comment_recommended_number")
+    private int commentRecommend;
+
+    @Column(nullable = false, length=4)
+    private int commentPassword;
+
+    @Column(nullable = false)
+    private int commentHoroscope;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+    @ManyToOne
+    @JoinColumn(name="order_list_code")
+    private OrderList orderList;
+
+    @ManyToOne
+    @JoinColumn(name="bulletin_board_code")
+    private BulletinBoard bulletinBoard;
+}
Index: src/main/java/ReBack/core/data/CommentFiles.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/CommentFiles.java b/src/main/java/ReBack/core/data/CommentFiles.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/CommentFiles.java	(date 1648719706000)
@@ -0,0 +1,35 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name="tbl_File")
+public class CommentFiles {
+    @SequenceGenerator(name = "file_seq_generator",
+            sequenceName = "file_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "file_seq_generator")
+    private Long fileCode;
+
+    @Column(length=100)
+    private String fileName;
+
+    @Column
+    private String filePath;
+
+    @Column
+    private String fileImgPath;
+
+    @ManyToOne
+    @JoinColumn(name="comment_code")
+    private Comment comment;
+
+}
Index: src/main/java/ReBack/core/data/FinancialSupport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/FinancialSupport.java b/src/main/java/ReBack/core/data/FinancialSupport.java
new file mode 100644
--- /dev/null	(date 1649066954000)
+++ b/src/main/java/ReBack/core/data/FinancialSupport.java	(date 1649066954000)
@@ -0,0 +1,40 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class FinancialSupport {
+    @SequenceGenerator(name = "financial_support_seq_generator",
+            sequenceName = "financial_support_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "financial_support_seq_generator")
+    private Long financialSupportCode;
+
+    @Column(nullable = false, name="financial_support_date")
+    private LocalDateTime financialDate;
+
+    @Column(nullable = false, name="financial_support_amount")
+    private int financialAmount;
+
+    @Column(nullable = false, length=1, name="financial_support_type")
+    private String financialType;
+
+    @Column(name="issue_receipt_status", length=15)
+    private String statusIssue;
+
+    @Column(name="receipt_request_status", length=15)
+    private String statusApp;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member memberCode;
+}
Index: src/main/java/ReBack/core/data/Schedule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Schedule.java b/src/main/java/ReBack/core/data/Schedule.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Schedule.java	(date 1648719706000)
@@ -0,0 +1,38 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Schedule {
+    @SequenceGenerator(name = "schedule_seq_generator",
+            sequenceName = "schedule_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "schedule_seq_generator")
+    private Long scheduleCode;
+
+    @Column(nullable = false)
+    private LocalDateTime scheduleStartTime;
+
+    @Column(nullable = false)
+    private LocalDateTime scheduleEndTime;
+
+    @Column(nullable = false, length=1)
+    private int scheduleType;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+    @ManyToOne
+    @JoinColumn(name="lecture_code")
+    private Lecture lecture;
+}
Index: src/main/java/ReBack/core/data/ClothingSponsor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/ClothingSponsor.java b/src/main/java/ReBack/core/data/ClothingSponsor.java
new file mode 100644
--- /dev/null	(date 1649038514000)
+++ b/src/main/java/ReBack/core/data/ClothingSponsor.java	(date 1649038514000)
@@ -0,0 +1,42 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.sql.Timestamp;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class ClothingSponsor {
+    @SequenceGenerator(name = "clothing_sponsor_seq_generator",
+            sequenceName = "clothing_sponsor_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "clothing_sponsor_seq_generator")
+    private Long clothingSponsorCode;
+
+    @Column(nullable = false, name="clothing_sponsor_amount")
+    private int amount;
+
+    @Column(nullable = false, name="clothing_sponsor_pickup_date")
+    private LocalDateTime pickupDate;
+
+    @Column(nullable = false, name="clothing_sponsor_pickup_area", length = 20)
+    private String pickupArea;
+
+    @Column(name="receipt_issue_status", length=15)
+    private String issueStatus;
+
+    @Column(name="receipt_application_status", length=15)
+    private String appStatus;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member MemberCode;
+
+}
Index: src/main/java/ReBack/core/data/SponsorDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/SponsorDetails.java b/src/main/java/ReBack/core/data/SponsorDetails.java
new file mode 100644
--- /dev/null	(date 1649038514000)
+++ b/src/main/java/ReBack/core/data/SponsorDetails.java	(date 1649038514000)
@@ -0,0 +1,24 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class SponsorDetails {
+    @SequenceGenerator(name = "sponsor_details_seq_generator",
+            sequenceName = "sponsor_details_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sponsor_details_seq_generator")
+    private Long SponsorDetailsCode;
+
+    @ManyToOne
+    @JoinColumn(name="financial_support_code")
+    private FinancialSupport financialSupportCode;
+}
Index: src/main/java/ReBack/core/data/Material.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Material.java b/src/main/java/ReBack/core/data/Material.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Material.java	(date 1648719706000)
@@ -0,0 +1,25 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Material {
+    @SequenceGenerator(name = "material_seq_generator",
+            sequenceName = "material_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "material_seq_generator")
+    private Long materialCode;
+
+    @Column(length=30, nullable = false)
+    private String materialName;
+
+}
+
Index: src/main/java/ReBack/core/data/OrderList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/OrderList.java b/src/main/java/ReBack/core/data/OrderList.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/OrderList.java	(date 1648719706000)
@@ -0,0 +1,43 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class OrderList {
+    @SequenceGenerator(name = "order_list_seq_generator",
+            sequenceName = "order_list_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "order_list_seq_generator")
+    private Long orderListCode;
+
+    @Column(nullable = false)
+    private int orderListCount;
+
+    @Column(nullable = false)
+    private int orderListAmount;
+
+    @Column(nullable = false, name="order_list_mileage_point")
+    private int orderListPoint;
+
+    @Column(nullable = false, length=10, name="order_list_purchase_status")
+    private String orderListStatus;
+
+    @Column(nullable = false)
+    private int OrderListReviewPoint;
+
+    @ManyToOne
+    @JoinColumn(name="orders_code")
+    private Orders orders;
+
+    @ManyToOne
+    @JoinColumn(name="product_code")
+    private Product product;
+}
Index: src/main/java/ReBack/core/data/Comments.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Comments.java b/src/main/java/ReBack/core/data/Comments.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Comments.java	(date 1648719706000)
@@ -0,0 +1,34 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Comments {
+    @SequenceGenerator(name = "comments_seq_generator",
+            sequenceName = "comments_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "comments_seq_generator")
+    private Long commentsCode;
+
+    @Column(nullable = false, length=300)
+    private String commentsContent;
+
+    @Column(nullable = false, length = 100)
+    private String commentsPassword;
+
+    @ManyToOne
+    @JoinColumn(name="comment_code")
+    private Comment comment;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+}
Index: src/main/java/ReBack/core/data/Lecture.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Lecture.java b/src/main/java/ReBack/core/data/Lecture.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Lecture.java	(date 1648719706000)
@@ -0,0 +1,55 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
+@Entity
+    @ToString
+    @Getter
+    @Builder
+    @AllArgsConstructor
+    @NoArgsConstructor
+public class Lecture {
+    @SequenceGenerator(name = "lecture_generator",
+            sequenceName = "lecture_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "lecture_generator")
+    private Long lectureCode;
+
+    @Column(length=50, nullable = false)
+    private String lectureName;
+
+    @Column(length=10, nullable = false)
+    private int lecturePersonnel;
+
+    @Column(length=20, nullable = false)
+    private LectureAvailability lectureAvailability;
+
+    @Column(length=5, nullable = false)
+    private int minimumNumber;
+
+    @Column(length=5, nullable = false)
+    private int applicationNumber;
+
+    @Column(nullable = false)
+    private String lecturePlace;
+
+    @Column(nullable = false)
+    private LocalDateTime lectureDate;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+    @ManyToOne
+    @JoinColumn(name="category_code")
+    private Category category;
+
+    @ManyToOne
+    @JoinColumn(name="material_code")
+    private Material material;
+}
Index: src/main/java/ReBack/core/data/BulletinBoard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/BulletinBoard.java b/src/main/java/ReBack/core/data/BulletinBoard.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/BulletinBoard.java	(date 1648719706000)
@@ -0,0 +1,31 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class BulletinBoard {
+    @SequenceGenerator(name = "bulletin_board_seq_generator",
+            sequenceName = "bulletin_board_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "bulletin_board_seq_generator")
+    private Long bulletinBoardCode;
+
+    @Column(nullable = false, length=20)
+    private String bulletinBoardType;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+    @ManyToOne
+    @JoinColumn(name="lecture_code")
+    private Lecture lecture;
+}
Index: src/main/java/ReBack/core/data/Design.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Design.java b/src/main/java/ReBack/core/data/Design.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Design.java	(date 1648719706000)
@@ -0,0 +1,44 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Design {
+    @SequenceGenerator(name = "design_seq_generator",
+            sequenceName = "design_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "design_seq")
+    private Long designCode;
+
+    @Column(length=50, nullable = false)
+    private String designName;
+
+    @Column(length=1, nullable = false)
+    private int designState;
+
+    @Column(name="design_register_date", nullable = false)
+    private LocalDateTime designDate;
+
+    @Column(name="design_modification_date")
+    private LocalDateTime designModification;
+
+    @Column(name="design_attached_image_path", nullable = false)
+    private String designImagePath;
+
+    @ManyToOne
+    @JoinColumn(name="category_code")
+    private Category category;
+
+    @ManyToOne
+    @JoinColumn(name="material_code")
+    private Material material;
+}
Index: src/main/java/ReBack/core/data/MemberType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/MemberType.java b/src/main/java/ReBack/core/data/MemberType.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/MemberType.java	(date 1648719706000)
@@ -0,0 +1,5 @@
+package ReBack.core.data;
+
+public enum MemberType {
+    GENERALMEMBER, WRITER, COMPANY
+}
Index: src/main/java/ReBack/core/data/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Category.java b/src/main/java/ReBack/core/data/Category.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Category.java	(date 1648719706000)
@@ -0,0 +1,23 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Category {
+    @SequenceGenerator(name = "category_seq_generator",
+            sequenceName = "category_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "category_seq_generator")
+    private Long CategoryCode;
+
+    @Column(length=30, nullable = false)
+    private String CategoryName;
+}
Index: src/main/java/ReBack/core/data/WriterInformation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/WriterInformation.java b/src/main/java/ReBack/core/data/WriterInformation.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/WriterInformation.java	(date 1648719706000)
@@ -0,0 +1,48 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDate;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class WriterInformation {
+    @SequenceGenerator(name = "writer_information_seq_generator",
+            sequenceName = "writer_information_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "writer_information_seq_generator")
+    private Long writerInformationCode;
+
+    @Column(length=200, name="writer_lecture_place")
+    private String writerLecturePlace;
+
+    @Column
+    private LocalDate availableStartTime;
+
+    @Column
+    private LocalDate availableFinishTime;
+
+    @Column(length=30)
+    private String availableDay;
+
+    @Column(length=100)
+    private String trainingTopic;
+
+    @Column
+    private int trainingStatus;
+
+    @Column
+    private int feedbackStatus;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+
+}
Index: src/main/java/ReBack/core/data/Refund.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Refund.java b/src/main/java/ReBack/core/data/Refund.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Refund.java	(date 1648719706000)
@@ -0,0 +1,36 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Refund {
+    @SequenceGenerator(name = "refund_seq_generator",
+            sequenceName = "refund_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "refund_seq_generator")
+    private Long refundCode;
+
+    @Column(nullable = false)
+    private int refundCount;
+
+    @Column(nullable = false)
+    private int refundAmount;
+
+    @Column(nullable = false, length=1)
+    private int refundStatus;
+
+    @Column(nullable = false)
+    private int refundPoint;
+
+    @ManyToOne
+    @JoinColumn(name="order_list_code")
+    private OrderList orderList;
+}
Index: src/main/java/ReBack/core/data/Pay.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Pay.java b/src/main/java/ReBack/core/data/Pay.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Pay.java	(date 1648719706000)
@@ -0,0 +1,40 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Pay {
+    @SequenceGenerator(name = "pay_seq_generator",
+            sequenceName = "pay_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pay_seq_generator")
+    private Long payCode;
+
+    @Column(nullable = false)
+    private LocalDateTime payTime;
+
+    @Column
+    private int payPoint;
+
+    @Column(nullable = false)
+    private int payAmount;
+
+    @Column(nullable = false, length = 4)
+    private String payValidity;
+
+    @Column(nullable = false, length = 1, name = "pay_payment_method")
+    private int payMethod;
+
+    @ManyToOne
+    @JoinColumn(name="sponsor_details_code")
+    private SponsorDetails sponsorDetails;
+}
Index: src/main/java/ReBack/core/data/Orders.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Orders.java b/src/main/java/ReBack/core/data/Orders.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Orders.java	(date 1648719706000)
@@ -0,0 +1,57 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Orders {
+    @SequenceGenerator(name = "orders_seq_generator",
+            sequenceName = "orders_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "orders_seq_generator")
+    private Long ordersCode;
+
+    @Column(name="order_pay_total_amount", nullable = false, length=7)
+    private int ordersTotal;
+
+    @Column(nullable = false)
+    private OrdersState ordersState;
+
+    @Column(length=100)
+    private String ordersRequest;
+
+    @Column(name="orders_receiver_address", nullable = false)
+    private String ordersAddress;
+
+    @Column(nullable = false, length=10)
+    private String ordersReceiverName;
+
+    @Column(nullable = false, length=13, name="orders_receiver_phone_number")
+    private int ordersPhoneNum;
+
+    @Column(nullable = false, name="orders_delivery_status", length=1)
+    private int ordersStatus;
+
+    @Column(nullable = false, name="orders_delivery_company_information", length = 20)
+    private String ordersDeliveryInfo;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+    @ManyToOne
+    @JoinColumn(name="member_design_code")
+    private MemberDesign memberDesign;
+
+    @ManyToOne
+    @JoinColumn(name="pay_code")
+    private Pay pay;
+
+}
Index: src/main/java/ReBack/core/data/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Product.java b/src/main/java/ReBack/core/data/Product.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Product.java	(date 1648719706000)
@@ -0,0 +1,48 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Product {
+    @SequenceGenerator(name = "product_seq_generator",
+            sequenceName = "product_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "product_seq_generator")
+    private Long productCode;
+
+    @Column(nullable = false, name="product_information")
+    private String productInfo;
+
+    @Column(nullable = false, length=50)
+    private String productName;
+
+    @Column(nullable = false, length=8)
+    private int productPrice;
+    
+    @Column(nullable = false)
+    private String productFileName;
+
+    @Column(nullable = false)
+    private String productFilePath;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+    @ManyToOne
+    @JoinColumn(name="category_code")
+    private Category category;
+
+    @ManyToOne
+    @JoinColumn(name="material_code")
+    private Material material;
+
+}
Index: src/main/java/ReBack/core/data/LectureAvailability.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/LectureAvailability.java b/src/main/java/ReBack/core/data/LectureAvailability.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/LectureAvailability.java	(date 1648719706000)
@@ -0,0 +1,5 @@
+package ReBack.core.data;
+
+public enum LectureAvailability {
+    OVER,UNDER,DEADLINE
+}
Index: src/main/java/ReBack/core/data/Consulting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Consulting.java b/src/main/java/ReBack/core/data/Consulting.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Consulting.java	(date 1648719706000)
@@ -0,0 +1,41 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Consulting {
+    @SequenceGenerator(name = "consulting_seq_generator",
+            sequenceName = "consulting_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "consulting_seq_generator")
+    private Long consultingCode;
+
+    @Column(length=40, nullable = false)
+    private String consultingName;
+
+    @Column(nullable = false)
+    private LocalDateTime consultingStartingTime;
+
+    @Column(nullable = false)
+    private LocalDateTime consultingEndTime;
+
+    @Column(nullable = false, length = 50)
+    private String consultingType;
+
+    @ManyToOne
+    @JoinColumn(name="member_code1")
+    private Member member1;
+
+    @ManyToOne
+    @JoinColumn(name="member_code2")
+    private Member member2;
+}
Index: src/main/java/ReBack/core/data/MemberHowJoin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/MemberHowJoin.java b/src/main/java/ReBack/core/data/MemberHowJoin.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/MemberHowJoin.java	(date 1648719706000)
@@ -0,0 +1,5 @@
+package ReBack.core.data;
+
+public enum MemberHowJoin {
+    LOCAL, KAKAO
+}
Index: src/main/java/ReBack/core/data/Certificate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Certificate.java b/src/main/java/ReBack/core/data/Certificate.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Certificate.java	(date 1648719706000)
@@ -0,0 +1,5 @@
+package ReBack.core.data;
+
+public enum Certificate {
+    GTQ
+}
Index: src/main/java/ReBack/core/data/WriterCertificate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/WriterCertificate.java b/src/main/java/ReBack/core/data/WriterCertificate.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/WriterCertificate.java	(date 1648719706000)
@@ -0,0 +1,34 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class WriterCertificate {
+    @SequenceGenerator(name = "writer_certificate_seq_generator",
+            sequenceName = "writer_certificate_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "writer_certificate_seq")
+    private Long writerCertificateCode;
+
+    @Column(length=50, nullable = false)
+    private String writerOwnCertificateName;
+
+    @Column(nullable = false)
+    private String writerCertificateImgPath;
+
+    @Column
+    private Certificate certificate;
+
+    @ManyToOne
+    @JoinColumn(name="writer_information_code")
+    private WriterInformation writerInformation;
+
+}
Index: src/main/java/ReBack/core/data/OrdersState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/OrdersState.java b/src/main/java/ReBack/core/data/OrdersState.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/OrdersState.java	(date 1648719706000)
@@ -0,0 +1,5 @@
+package ReBack.core.data;
+
+public enum OrdersState {
+    REGISTR, NOTRECEIVED
+}
Index: src/main/java/ReBack/core/data/MemberWithdrawal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/MemberWithdrawal.java b/src/main/java/ReBack/core/data/MemberWithdrawal.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/MemberWithdrawal.java	(date 1648719706000)
@@ -0,0 +1,5 @@
+package ReBack.core.data;
+
+public enum MemberWithdrawal {
+    GENERALMEMBER,WITHDRAWAL
+}
Index: src/main/java/ReBack/core/data/DonationFacility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/DonationFacility.java b/src/main/java/ReBack/core/data/DonationFacility.java
new file mode 100644
--- /dev/null	(date 1649038514000)
+++ b/src/main/java/ReBack/core/data/DonationFacility.java	(date 1649038514000)
@@ -0,0 +1,39 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class DonationFacility {
+    @SequenceGenerator(name = "donation_facility_seq_generator",
+            sequenceName = "donation_facility_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "donation_facility_seq_generator")
+    private Long donationFacilityCode;
+
+    @Column(name="donation_facility_name", nullable = false, length=30)
+    private String facilityName;
+
+    @Column(name="donation_facility_address", nullable = false)
+    private String facilityAddress;
+
+    @Column(name="donation_facility_description", nullable = false)
+    private String facilityDescription;
+
+    @Column(name="donation_facility_category", nullable = false, length=30)
+    private String facilityCategory;
+
+    @Column(nullable = false)
+    private int monthlyDonation;
+
+    @ManyToOne
+    @JoinColumn(name="financial_support_code")
+    private FinancialSupport financialSupportCode;
+}
Index: src/main/java/ReBack/core/data/MemberCourseList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/MemberCourseList.java b/src/main/java/ReBack/core/data/MemberCourseList.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/MemberCourseList.java	(date 1648719706000)
@@ -0,0 +1,42 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class MemberCourseList {
+    @SequenceGenerator(name = "member_course_list_seq_generator",
+            sequenceName = "member_course_list_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "member_course_list_seq_generator")
+    private Long memberCourseListCode;
+
+    @Column(nullable = false, name="member_course_list_course_date")
+    private LocalDateTime memberCourseDate;
+
+    @Column(length = 50, nullable = false, name="member_course_list_place")
+    private String memberCoursePlace;
+
+    @Column(length=30, nullable = false, name="member_course_list_type")
+    private String memberCourseType;
+
+    @Column(name="member_course_list_course_registration")
+    private int memberCourseReg;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+    @ManyToOne
+    @JoinColumn(name="lecture_code")
+    private Lecture lecture;
+}
Index: src/main/java/ReBack/core/data/Cart.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/Cart.java b/src/main/java/ReBack/core/data/Cart.java
new file mode 100644
--- /dev/null	(date 1648719706000)
+++ b/src/main/java/ReBack/core/data/Cart.java	(date 1648719706000)
@@ -0,0 +1,32 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class Cart {
+    @SequenceGenerator(name = "cart_seq_generator",
+            sequenceName = "cart_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "cart_seq_generator")
+    private Long cartCode;
+
+    @Column(length=3, nullable = false)
+    private int cartCount;
+
+    @ManyToOne
+    @JoinColumn(name="member_code")
+    private Member member;
+
+    @ManyToOne
+    @JoinColumn(name="product_code")
+    private Product product;
+
+}
Index: src/main/java/ReBack/core/data/DonationReceipt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ReBack/core/data/DonationReceipt.java b/src/main/java/ReBack/core/data/DonationReceipt.java
new file mode 100644
--- /dev/null	(date 1649038514000)
+++ b/src/main/java/ReBack/core/data/DonationReceipt.java	(date 1649038514000)
@@ -0,0 +1,35 @@
+package ReBack.core.data;
+
+import lombok.*;
+
+import javax.persistence.*;
+import java.time.LocalDateTime;
+
+@Entity
+@ToString
+@Getter
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+public class DonationReceipt {
+    @SequenceGenerator(name = "donation_receipt_seq_generator",
+            sequenceName = "donation_receipt_seq",
+            initialValue = 1, allocationSize = 1)
+    @Id
+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "donation_receipt_seq_generator")
+    private Long donationReceiptCode;
+
+    @Column(name="donation_receipt_issue_date", nullable = false)
+    private LocalDateTime donationIssueDate;
+
+    @Column(name="donation_receipt_amout", nullable = false)
+    private int donationAmount;
+
+    @ManyToOne
+    @JoinColumn(name="clothing_sponsor_code")
+    private ClothingSponsor clothingSponsorCode;
+
+    @ManyToOne
+    @JoinColumn(name="sponsor_details_code")
+    private SponsorDetails sponsorDetailsCode;
+}
